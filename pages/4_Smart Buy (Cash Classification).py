from roboflow import Roboflow
from PIL import Image
from gtts import gTTS
from io import BytesIO
import streamlit as st
import numpy as np

def format_changer(selected_output):
    match selected_output:
        case "1000B":
            return "‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£ 1,000 ‡∏ö‡∏≤‡∏ó"
        case "100B":
            return "‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£ 100 ‡∏ö‡∏≤‡∏ó"
        case "100B":
            return "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç 10 ‡∏ö‡∏≤‡∏ó"
        case "1B":
            return "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç 1 ‡∏ö‡∏≤‡∏ó"
        case "20B":
            return "‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£ 20 ‡∏ö‡∏≤‡∏ó"
        case "25S":
            return "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç 25 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå"
        case "2B":
            return "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç 2 ‡∏ö‡∏≤‡∏ó"
        case "500B":
            return "‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£ 500 ‡∏ö‡∏≤‡∏ó"
        case "50B":
            return "‡∏ò‡∏ô‡∏ö‡∏±‡∏ï‡∏£ 50 ‡∏ö‡∏≤‡∏ó"
        case "50S":
            return "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç 50 ‡∏™‡∏ï‡∏≤‡∏á‡∏Ñ‡πå"
        case "5B":
            return "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç 5 ‡∏ö‡∏≤‡∏ó"
        case default:
            return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î"
        
def result_changer(selected_output):
    match selected_output:
        case "1000B":
            return 1000
        case "100B":
            return 100
        case "100B":
            return 10
        case "1B":
            return 1
        case "20B":
            return 20
        case "25S":
            return 0.25
        case "2B":
            return 2
        case "500B":
            return 500
        case "50B":
            return 50
        case "50S":
            return 0.50
        case "5B":
            return 5
        case default:
            return 0

def convert_str_to_audio_data(audio_text):
    audio_data = BytesIO()
    tts = gTTS(audio_text, lang = "th")
    tts.write_to_fp(audio_data)

    return audio_data

st.title("Smart Buyüíµ")

rf = Roboflow(api_key = "jZMsFfsrIiiMCfpYKlLa")
project = rf.workspace().project("thai-baht-detection")
model = project.version(3).model

st.header("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ä‡πà‡∏ß‡∏¢‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏îü™ô (Cash Classification)")
st.divider()
input_image_BC = st.camera_input("üì∏‡∏Å‡∏î‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...", key = "firstCamera")

if input_image_BC is not None:
    amount = 0
    audio_text = "‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ: "

    img = Image.open(input_image_BC)
    img_array = np.array(img)
    predicted_output = model.predict(img_array, confidence = 40, overlap = 30).json().get("predictions")

    number_of_cash = len(predicted_output)
    st.divider()
    st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πåüìë")
    st.write("‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:")
    if number_of_cash != 0:
        for i in range(number_of_cash):
            selected_output = (predicted_output)[i].get("class")
            confidence = (predicted_output)[i].get("confidence")
            result = format_changer(selected_output)
            money = result_changer(selected_output)
            amount = amount + money
            st.write(str(i + 1) + ". " + result + " (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: " + str((format(confidence * 100, ".2f"))) + "%)")
            audio_text = audio_text + str(i + 1) + ". " + result + " (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à: " + str((format(confidence * 100, ".2f"))) + "%) "
    
    else:
        st.write("‚ùå‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà")
        audio_text = "‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà"

    if audio_text != "‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÉ‡∏´‡∏°‡πà":
        audio_text = audio_text + "‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î " + str(format(amount, ",.2f")) + " ‡∏ö‡∏≤‡∏ó"
        st.write("‡∏°‡∏µ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î " + str(format(amount, ",.2f")) + " ‡∏ö‡∏≤‡∏ó üí∏")

    audio_data = convert_str_to_audio_data(audio_text)

    st.subheader("‡πÄ‡∏™‡∏µ‡∏¢‡∏áüîä")
    st.audio(audio_data)